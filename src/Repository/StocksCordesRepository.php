<?php

namespace App\Repository;

use App\Entity\StocksCordes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * StocksLanternesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StocksCordesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, StocksCordes::class);
    }

    // /**
    //  * @return Carousel[] Returns an array of Carousel objects
    //  */
    /*
    public function findByExampleField($value)
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.exampleField = :val')
            ->setParameter('val', $value)
            ->orderBy('c.id', 'ASC')
            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;
    }
    */

    /*
    public function findOneBySomeField($value): ?Carousel
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
    public function getCordeAssembler($parc)
    {
        $qb = $this->createQueryBuilder('stocksCorde');
        $qb->select('stocksCorde')
            ->addSelect('poche')
            ->where('stocksCorde.pret = false')
            ->andWhere('stocksCorde.emplacement IS NULL')
            ->andWhere('stocksCorde.dateAssemblage IS NOT NULL')
            ->join('stocksCorde.pocheAssemblage', 'poche');
        return $qb->getQuery()->getResult();
    }

    public function getCordePreparer($stocksArticlesSn, $corde)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->where('c.pret = false')
            ->andWhere('c.emplacement IS NULL')
            ->join('c.article', 's')
            ->addSelect('s')
            ->andwhere('s.refStockArticle = ?1')
            ->setParameter(1, $stocksArticlesSn->getRefStockArticle())
            ->andWhere('s.numeroSerie = ?2')
            ->setParameter(2, $stocksArticlesSn->getNumeroSerie())
            ->andWhere('c.corde = ?3')
            ->setParameter(3, $corde)
            ->orderBy('c.dateDeCreation', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function getCordePreparerYellowWarning($parc)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('corde.nomCorde')
            ->addSelect('article.libArticle')
            ->addSelect('stocksarticlessn.numeroSerie')
            ->addSelect('c.dateDeCreation')
            ->addSelect('c.quantiter')
            ->join('c.article', 'stocksarticlessn')
            ->join('c.corde', 'corde')
            ->join('stocksarticlessn.refStockArticle', 'stocksarticle')
            ->join('stocksarticle.refArticle', 'article')
            ->where('corde.parc = :parc')
            ->andWhere('c.dateDeCreation = :date')
            ->andWhere('c.pret = :pret')
            ->andWhere('c.emplacement IS NULL')
            ->setParameter('date', new \DateTime(Date('Y-m-d')))
            ->setParameter('pret', false)
            ->setParameter('parc', $parc);
        return $qb->getQuery()->getResult();
    }

    public function getCordePreparerRedWarning($parc)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('corde.nomCorde')
            ->addSelect('article.libArticle')
            ->addSelect('stocksarticlessn.numeroSerie')
            ->addSelect('c.dateDeCreation')
            ->addSelect('c.quantiter')
            ->join('c.article', 'stocksarticlessn')
            ->join('c.corde', 'corde')
            ->join('stocksarticlessn.refStockArticle', 'stocksarticle')
            ->join('stocksarticle.refArticle', 'article')
            ->where('corde.parc = :parc')
            ->andWhere('c.dateDeCreation < :date')
            ->andWhere('c.emplacement IS NULL')
            ->andWhere('c.pret = :pret')
            ->setParameter('date', new \DateTime(Date('Y-m-d')))
            ->setParameter('pret', false)
            ->setParameter('parc', $parc);
        return $qb->getQuery()->getResult();
    }
}
