<?php

namespace App\Repository;

use App\Entity\StocksPochesBS;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * StocksPochesBSRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StocksPochesBSRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, StocksPochesBS::class);
    }

    // /**
    //  * @return Carousel[] Returns an array of Carousel objects
    //  */
    /*
    public function findByExampleField($value)
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.exampleField = :val')
            ->setParameter('val', $value)
            ->orderBy('c.id', 'ASC')
            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;
    }
    */

    /*
    public function findOneBySomeField($value): ?Carousel
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
    public function getPochePreparer($stocksArticlesSn, $poche)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.pret = false')
            ->andWhere('p.emplacement IS NULL')
            ->join('p.article', 's')
            ->addSelect('s')
            ->andwhere('s.refStockArticle = ?1')
            ->setParameter(1, $stocksArticlesSn->getRefStockArticle())
            ->andWhere('s.numeroSerie = ?2')
            ->setParameter(2, $stocksArticlesSn->getNumeroSerie())
            ->andWhere('p.pochesbs = ?3')
            ->setParameter(3, $poche);
        return $qb->getQuery()->getResult();
    }

    public function getPocheByDate(\DateTime $de, \DateTime $a)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.dateAssemblage >= :assemblageDeb')
            ->andWhere('p.dateAssemblage <=  :assemblageFin')
            ->setParameter('assemblageDeb', $de)
            ->setParameter('assemblageFin', $a)
            ->orWhere('p.dateChaussement >= :chaussmentDeb')
            ->andWhere('p.dateChaussement <= :chaussmentFin')
            ->setParameter('chaussmentDeb', $de)
            ->setParameter('chaussmentFin', $a);
        return $qb->getQuery()->getResult();
    }

    public function pocheAssemble($parc)
    {
        $qb = $this->createQueryBuilder('pas')
            ->select('pas')
            ->addSelect('corde')
            ->addSelect('cordeAssemblage')
            ->join('pas.cordeAssemblage', 'cordeAssemblage')
            ->join('cordeAssemblage.corde', 'corde')
            ->where('corde.parc = :parc')
            ->andWhere('pas.cordeAssemblage IS NOT NULL')
            ->setParameter('parc', $parc);
        return $qb->getQuery()->getResult();
    }
}
